name: AOpenwrt-r2s-lean


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
 #   watch:
 #     types: started
#  schedule:
#    - cron: 0 21 */7 * * 

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: script/ar2s.lean
  DIY_P1_SH: script/aipv6mini.sh
  DIY_P2_SH: script/clash-core.sh
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo -E apt update
          sudo -E apt full-upgrade -y
          sudo -E apt install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev \
          libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz \
          mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pip libpython3-dev qemu-utils \
          rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E apt autoremove --purge
          sudo -E apt clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
      - name: Check server performance
        id: checkcpu
        run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8171M"
         echo "已知性能不足CPU型号：8272CL有时可以 E5-2673基本不行"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th 
         if grep  "8272" "/proc/cpuinfo" || grep  "8370" "/proc/cpuinfo" ; then
          echo "CPU YES！！！"
          echo "CKCPU=success" >> $GITHUB_ENV
         else
             echo "CPU NO！！！"
             echo "CKCPU=failure" >> $GITHUB_ENV
             exit 1
         fi
      - name: Git lede
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          ls
      - name: Update feeds
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: 'openwrt'
          mixkey: 'r2s'
      - name: Update package
        run: |
         [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
         # cp -rf PATCH/r5s.patch ./openwrt/package/diy
         chmod +x ./$DIY_P1_SH
         chmod +x ./$DIY_P2_SH
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "DATA=`date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
          echo "${{ env.FIRMWARE }} =----= ${{ env.DATA }}"
         cd openwrt
         $GITHUB_WORKSPACE/$DIY_P1_SH
         $GITHUB_WORKSPACE/$DIY_P2_SH armv8
         # patch -p1 <../PATCH/r5s.patch
         chmod -R 755 .
      - name: Generate configuration file
        working-directory: ./openwrt
        run: |
          make defconfig
      - name: Make download
        working-directory: ./openwrt
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
     
      - name: Compile Packages
        working-directory: ./openwrt
        id: compile
        run: |
         df -h
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
        
      - name: Generate Firmware
        working-directory: ./openwrt
        run: |
         df -h
         # mkdir -p files/etc/uci-defaults/
         # cp ../scriptx/init-settings.sh files/etc/uci-defaults/99-init-settings
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
         make checksum
      - name: Prepare Artifact
        run: |
          mkdir -p ./firmwarer2s
          mkdir -p ./firmwarer4s
          find ./openwrt/bin/targets/ -name "*r2s*sysupgrade.img*" | xargs -i mv -f {} ./firmwarer2s
          cd ./firmwarer2s
          gzip *.img | true
          find ${{ env.FIRMWARE }}/openwrt/bin/targets/ -name "*r4s*sysupgrade.img*" | xargs -i mv -f {} ${{ env.FIRMWARE }}/firmwarer4s
          cd ${{ env.FIRMWARE }}/firmwarer4s
          gzip *.img | true
      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-R2sOpenWrt-Ipv6-Vip-Firmware
          path: ./firmwarer2s
      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-R4sOpenWrt-Ipv6-Vip-Firmware
          path: ./firmwarer4s
