name: BOpenWrt-mini-CI

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: started
#  schedule:
#    - cron: 0 21 */7 * * 
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: minialldrv.config
  DIY_P1_SH: script/initmini.sh
  DIY_P2_SH: script/clash-core.sh

jobs:

  build_openwrt:

    name: OpenWrt_Build 

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:


      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: master
      - name: Check server performance
        run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8171M"
         echo "已知性能不足CPU型号：8272CL"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |

          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "Asia/Shanghai"
      - name: Update feeds
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          git clone https://github.com/sirpdboy/sirpdboy-package ./package/diy
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          rm -rf ./tmp && rm -rf .config
      - name: Cache
        uses: klever1988/cachewrtbuild@main
        with:
          ccache: 'true' 
          prefix: ${{ github.workspace }}/openwrt
      - name: Update package
        run: |
         [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
         chmod +x ./$DIY_P1_SH
         chmod +x ./$DIY_P2_SH

          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "DATA=`TZ=UTC-8 date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
          echo "${{ env.FIRMWARE }} =----= ${{ env.DATA }}"
         cd openwrt
         ../$DIY_P1_SH
         chmod -R 755 .
      
      - name: Generate configuration file
        working-directory: ./openwrt
        run: |
          
          ../$DIY_P2_SH amd64
          make defconfig

      - name: Make download
        working-directory: ./openwrt
        run: |
          make download -j8
          find dl -size -1024c -exec rm -f {} \;
          
               
      - name: Compile Packages
        id: compile
        run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
         echo "::set-output name=COMPILE_STATUS::success"
        
      - name: Generate Firmware
        if: steps.compile.outputs.COMPILE_STATUS == 'success'
        id: generate
        run: |
         df -h
         cd openwrt 
         mkdir -p files/etc/uci-defaults/
         cp ../scriptx/init-settings.sh files/etc/uci-defaults/99-init-settings
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
         make checksum
          echo $?
      - name: Prepare Artifact
        run: |
          mkdir -p ./mini/firmware
          mkdir -p ./mini/package
          cp -rf $(find ./openwrt/bin/ -type f -name "*.ipk") ./mini/package
          find ./openwrt/bin/targets/ -name "*squashfs*img" | xargs -i mv -f {} ./mini/firmware
          cd ./mini/firmware
          gzip *.img
          echo -e "Sirpdboy-IPV6-MINI-${{ env.DATA }}-精简版--【EFI通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n" > 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt
      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-ipv6-mini-Firmware
          path: ./mini/firmware
      - name: Upload  IPK
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-ipv6-mini-Ipk
          path: ./mini/package
      - name: Upload Firmware wetransfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ./mini/firmware 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
