
name: OpenWrt-CI


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: started
#  schedule:
#    - cron: 0 21 */7 * * 

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: allappdrv.config
  DIY_P1_SH: script/initipv6.sh
  DIY_P2_SH: script/clash-core.sh
jobs:

  build_openwrt:

    name: OpenWrt_Build 

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: master
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          df -h
          sudo timedatectl set-timezone "Asia/Shanghai"
      - name: Update feeds
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
      - name: Load custom update feeds
        run: |
          [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
          cd openwrt
          git clone https://github.com/sirpdboy/sirpdboy-package ./package/diy
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Update package
        run: |
         [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
         chmod +x ./$DIY_P1_SH
         chmod +x ./$DIY_P2_SH
         echo "FIRMWARE=$PWD" >> $GITHUB_ENV
         echo "DATA=$(date +'%Y-%m-%d'-d +"12"hour) \n" >> $GITHUB_ENV
         cd openwrt
         ../$DIY_P1_SH
         ../$DIY_P2_SH amd64
         chmod -R 755 .
         
          make defconfig
      - name: Get Architecture
        working-directory: ${{ github.workspace }}/openwrt
        run: |
         TARGET_DEVICE_ARCH="$(grep "^CONFIG_TARGET_.*_.*=y$" ".config" | head -n 1 | sed 's/^CONFIG_TARGET_//g' | awk -F '_' '{print $1}')"
         echo "TARGET_DEVICE_ARCH=${TARGET_DEVICE_ARCH}-" >>$GITHUB_ENV
         latest_release="$(curl -s https://github.com/openwrt/openwrt/tags | grep -Eo "v[0-9\.]+\-*r*c*[0-9]*.tar.gz" | sed -n '/[2-9][0-9]/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')"
         echo "latest_release=${latest_release}" >>$GITHUB_ENV
      - name: Cache
        uses: HiGarfield/cachewrtbuild@main
        with:
          mixkey: ${{ env.TARGET_DEVICE_ARCH }}
          prefix: ${{ github.workspace }}/openwrt
      - name: Generate configuration file
        working-directory: ./openwrt
        run: |
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          
      - name: Compile Packages
        id: compile
        run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
         echo "::set-output name=COMPILE_STATUS::success"
        
      - name: Generate Firmware
        if: steps.compile.outputs.COMPILE_STATUS == 'success'
        id: generate
        run: |
         df -h
         cd openwrt 
         mkdir -p files/etc/uci-defaults/
         cp ../scriptx/init-settings.sh files/etc/uci-defaults/99-init-settings
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
         make checksum
      - name: Prepare Artifact
        run: |
          mkdir -p ./firmware
          mkdir -p ./package
          df -h
          cp -rf $(find ./openwrt/bin/packages/ -type f -name "*.ipk") ./package
          find ./openwrt/bin/targets/ -name "*combined*img" | xargs -i mv -f {} ./firmware
          cd ./firmware
          ls
          gzip *.img || true
          # find ${{ env.FIRMWARE }}/openwrt/bin/targets/ -name "*combined-efi.img" | xargs -i mv -f {} ${{ env.FIRMWARE }}/firmware
          # gzip *.img || true
          echo -e "Sirpdboy-IPV6-Plus-${{ env.DATA}}大全版--【efi通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n"  >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt || true
      - name: Upload Firmware wetransfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ./firmware 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"

      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: SirpdboyOpenWrt-IPV6-Plus-Firmware
          path: ./firmware
      - name: Upload  IPK
        uses: actions/upload-artifact@main
        with:
          name: SirpdboyOpenWrt-IPV6-Plus-Ipk
          path: ./package
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 7
          keep_minimum_runs: 3
