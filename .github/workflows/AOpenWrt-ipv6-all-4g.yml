name: AOpenWrt-ipv6-all-4g


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: started
#  schedule:
#    - cron: 0 21 */7 * * 

env:
  #REPO_URL: https://github.com/immortalwrt/immortalwrt
  #  https://github.com/loso3000/immortalwrt-1.git
  #REPO_BRANCH: openwrt-18.06-k5.4

  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: script/aipv6all-4g.lean
  DIY_P1_SH: script/aipv6all.sh
  DIY_P2_SH: script/clash-core.sh
  TZ: Asia/Shanghai
  
  
  
permissions:
  contents: read

jobs:

  build_openwrt:

    permissions:
      contents: write # for release creation

    name: Build OpenWrt firmware


    runs-on: ubuntu-20.04

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          
      - name: Check server performance
        run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8171M"
         echo "已知性能不足CPU型号：8272CL E5-2673"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
         
         if grep  "8272" "/proc/cpuinfo" || grep  "8370" "/proc/cpuinfo" ; then
          echo "CPU YES！！！"
          echo "CKCPU=success" >> $GITHUB_ENV
         else
             echo "CPU NO！！！"
             echo "CKCPU=failure" >> $GITHUB_ENV
             exit 1
         fi
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          chmod +x ./free_disk_space.sh
          ./free_disk_space.sh
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo timedatectl set-timezone "$TZ"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
      - name: git lede
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          ls

      - name: Update Feeds
        id: update
        run: |
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          echo "OPENWRTROOT=$PWD" >> $GITHUB_OUTPUT
          #mkdir cfeeds
          #git clone --depth=1 https://github.com/DHDAXCW/packages cfeeds/packages
          #git clone --depth=1 https://github.com/DHDAXCW/luci cfeeds/luci
          #cd $GITHUB_WORKSPACE/openwrt/cfeeds/packages
          #export packages_feed="$(pwd)"
          #cd $GITHUB_WORKSPACE/openwrt/cfeeds/luci
          #export luci_feed="$(pwd)"
          #cd $GITHUB_WORKSPACE/openwrt
          #sed -i '/src-git packages/d' feeds.conf.default
          #echo "src-link packages $packages_feed" >> feeds.conf.default
          #sed -i '/src-git luci/d' feeds.conf.default
          #echo "src-link luci $luci_feed" >> feeds.conf.default
          
          ./scripts/feeds update -a
      - name: Install Feeds
        run: |
          cd openwrt
          ./scripts/feeds install -a

      - name: Update package
        run: |
         [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
         chmod +x ./$DIY_P1_SH
         chmod +x ./$DIY_P2_SH
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "DATA=`date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
         cd openwrt
         $GITHUB_WORKSPACE/$DIY_P1_SH
         #$GITHUB_WORKSPACE/$DIY_P2_SH amd64
         chmod -R 755 .
         # sed -i '$a\CONFIG_DEVEL=y\nCONFIG_LOCALMIRROR=\"https://openwrt.cc/dl/coolsnowwolf/lede\"' .config
      - name: Generate configuration file

        run: |
         cd openwrt
          make defconfig
      - name: Make download
        working-directory: ./openwrt
        run: |
          make download -j50
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
               
      - name: Compile Packages
        id: compile
        run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j40
         make toolchain/compile -j$(nproc) || make toolchain/compile -j40
         make target/compile -j$(nproc) || make target/compile -j40 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j40 IGNORE_ERRORS=1
         make package/index
      - name: Generate Firmware
        run: |
         df -h
         cd openwrt 
         $GITHUB_WORKSPACE/$DIY_P2_SH amd64
         mkdir -p files/etc/uci-defaults/
         cp $GITHUB_WORKSPACE/scriptx/init-settings.sh files/etc/uci-defaults/99-init-settings
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
         pushd bin/targets/x86/64
         rm -rf *-x86-64-generic-kernel.bin
         rm -rf *-x86-64-generic-rootfs*
         rm -rf *-x86-64-generic-squashfs-rootfs.img*
         rm -rf *-x86-64-generic-squashfs-combined-efi.vmdk
         rm -rf *-x86-64-generic.manifest
         rm -rf *-x86-64-generic-squashfs-combined.img*
         popd
         make checksum
      - name: Prepare Artifact
        run: |
          mkdir -p ./firmwareipv6all
          mkdir -p ./packageipv6all
          find ./openwrt/bin/ -name "*.ipk" | xargs -i mv -f {}  ./packageipv6all
          find ./openwrt/bin/targets/ -name "*squashfs*img*" | xargs -i mv -f {} ./firmwareipv6all
          cd ./firmwareipv6all
          # gzip *.img |true
          echo -e "Sirpdboy-Ipv6-Vip-Plus-${{ env.DATA }}-大全版--【efi通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n"  >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt

      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-Ipv6-Vip-Plus-Firmware
          path: ./firmwareipv6all
      - name: Upload  IPK
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-Ipv6-Vip-Plus-Ipk
          path: ./packageipv6all
      - name: Upload Firmware wetransfer
        run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ./firmwareipv6all 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
