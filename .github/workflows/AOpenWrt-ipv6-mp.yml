
#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: AOpenWrt-ipv6-mp

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      branch:
        description: '选择仓库的分支：'
        default: 'master'
        required: true
        type: choice
        options: [ openwrt-21.02, master, stable,  openwrt-23.05 ]
      config_s:
        description: '配置文件'
        default: 'Vip-Mini'
        required: true
        type: choice
        options: [ Free-Super, Free-Mini, Free-Plus, Vip-Super,Vip-Bypass,Vip-Mini, Vip-Plus ]
      cpu_s:
        description: 'CPU优选'
        required: true
        default: '8'
        type: choice
        options:
          - '8'
          - '8370C'
          - '8272CL'
          - '8171M'
      target:
        description: '选择要生成的机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64, rm2100, xm2100, r2s, r4s, r4se, r5s, r5c ]
      date_s:
        description: '固件日期'
        default: 'default'
        required: false
env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  # REPO_URL: https://github.com/DHDAXCW/lede-rockchip
  #REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: feeds.conf.default
  DIY_P1_SH: diy/diyv
  APT: apt
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    name: lede-${{github.event.inputs.config_s}}-${{github.event.inputs.target}}-${{github.event.inputs.branch}}-${{github.event.inputs.date_s}}
    env:
      CONFIG_S: ${{github.event.inputs.config_s}}
      CPU_S: ${{github.event.inputs.cpu_s}}
      DATE_S: ${{github.event.inputs.date_s}}
      TARGET_DEVICE: ${{github.event.inputs.target}}
      REPO_BRANCH: ${{github.event.inputs.branch}}
    steps:
    - name: Checkout
      uses: actions/checkout@main
    - name: Check server performance
      run: |
        echo "已知CPU型号（降序）：7763,8370C,8272CL,8171M,E5系列"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
         if grep  $CPU_S "/proc/cpuinfo" ; then
          echo "CPU YES！！！"
          echo "CKCPU=success" >> $GITHUB_ENV
         else
             echo "CPU NO！！！"
             echo "CKCPU=failure" >> $GITHUB_ENV
             exit 1
         fi

    - name: cleanup free-disk
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true
    - name: noninteractive
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt-get update
        sudo -E apt-get -y full-upgrade
        sudo -E apt-get -y install $(cat $APT)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /mnt/workdir
          sudo chown $USER:$GROUPS /mnt/workdir
    - name: Clone source code
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        if [[ $REPO_BRANCH == 'stable' ]]; then
          git clone --depth 1 https://github.com/DHDAXCW/lede-rockchip -b $REPO_BRANCH openwrt
        else 
          git clone --depth 1 https://github.com/coolsnowwolf/lede -b $REPO_BRANCH  openwrt
        fi
        #  git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        # git clone --depth 1 $REPO_URL -b stable openwrt
          ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        if [[ $DATE_S == 'default' ]]; then
          echo "DATA=`date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
        else 
          echo "DATA=$DATE_S" >>$GITHUB_ENV
        fi
    - name: Cache
      id: cache
      uses: stupidloud/cachewrtbuild@main
      with:
        skip_saving: 'true'
        ccache: 'true'
        mixkey: 'x86_64'
        prefix: ${{ github.workspace }}/openwrt
    #- name: Cache
    #  uses: klever1988/cachewrtbuild@main
   #   with:
    #   ccache: 'true'
   #    mixkey: 'x86_64'
     #  clean:  'false'  # 'false'
   #    prefix: /mnt/workdir/openwrt

    - name: Update feeds
      run: | 
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
    - name: Update package
      run: |
         [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
         chmod +x ${DIY_P1_SH}
         cd openwrt
         $GITHUB_WORKSPACE/$DIY_P1_SH
         chmod -R 755 .
    - name:  Download packages
      run: |
        cd openwrt
        cat  $GITHUB_WORKSPACE/config/${CONFIG_S}  > .config
        #cat  $GITHUB_WORKSPACE/config/comm  >> .config
        echo -e 'CONFIG_DEVEL=y\nCONFIG_CCACHE=y' >> .config #Cache.Speedup
        make defconfig
        make download -j50
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        df -h
    - name: Compile Packages
      id: compile
      run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j$(nproc)
         make toolchain/compile -j$(nproc) || make toolchain/compile -j$(nproc)
         make target/compile -j$(nproc) || make target/compile -j$(nproc) IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j$(nproc) IGNORE_ERRORS=1
         make package/index
         bash  bakkmod.sh
    - name: Generate Firmware
      run: |
         df -h
         cd openwrt 
          make package/install -j$(nproc) || make package/install -j1 V=s
          make target/install -j$(nproc) || make target/install -j1 V=s
         pushd bin/targets/x86/64 
         rm -rf *generic-kernel.bin
         rm -rf *generic-rootfs.tar.gz
         rm -rf *generic-squashfs-rootfs.img.gz
         rm -rf *generic-squashfs-combined-efi.vmdk
         rm -rf *generic.manifest
         # mv openwrt-x86-64-generic-squashfs-combined-efi.img.gz $(date +"%Y.%m.%d")-docker-x86-64-kernel-6.1-squashfs-efi.img.gz
         popd 
         make checksum
         bash buildmd5.sh
    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ${{ env.DATA }}-EzOpWrt-Ipv6-${{env.CONFIG_S}}-${{env.TARGET_DEVICE}}-${{env.REPO_BRANCH}}-${{env.TARGET_DEVICE}}-Firmware
        path: ${{ env.FIRMWARE }}

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.DATA }}-EzOpWrt-Ipv6-${{ env.CONFIG_S }}-${{env.TARGET_DEVICE}}-${{env.REPO_BRANCH}}-${{env.TARGET_DEVICE}}-ipk
        path: ./openwrt/bin/packages/
   

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN}}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
          retain_days: 1
          keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.2.1
      with:
          keep_latest: 1
          delete_tags: true
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete Artifacts
      uses: geekyeggo/delete-artifact@v2
      with:
         name: |
            bin-archive
