name: BOpenwrt-r5s-lean


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: started
#  schedule:
#    - cron: 0 21 */7 * * 

env:

  #REPO_URL: https://github.com/immortalwrt/immortalwrt
  #  https://github.com/loso3000/immortalwrt-1.git
  REPO_URL: https://github.com/DHDAXCW/lede-rockchip
  REPO_BRANCH: stable
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: script/br5s.config
  DIY_P1_SH: script/br2s.sh
  DIY_P2_SH: script/clash-core.sh
  TZ: Asia/Shanghai
  
  
permissions:
  contents: read

jobs:

  build_openwrt:

    permissions:
      contents: write # for release creation

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          
      - name: Check server performance
        run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8171M"
         echo "已知性能不足CPU型号：8272CL E5-2673"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
         
         if grep  "8272" "/proc/cpuinfo" || grep  "8370" "/proc/cpuinfo" ; then
          echo "CPU YES！！！"
          echo "CKCPU=success" >> $GITHUB_ENV
         else
             echo "CPU NO！！！"
             #exit 1
         fi
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /usr/lib/jvm /opt/ghc /swapfile
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
      - name: git lede
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          ls
          df -h
      - name: Update feeds
        run: | 
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Update package
        run: |
         [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
         chmod +x ./$DIY_P1_SH
         chmod +x ./$DIY_P2_SH
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "DATA=`date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
          echo "${{ env.FIRMWARE }} =----= ${{ env.DATA }}"
         cd openwrt
         $GITHUB_WORKSPACE/$DIY_P1_SH
         chmod -R 755 .
          make defconfig
          df -h
      - name: Generate configuration file
        run: |
          cd openwrt
          make download -j32
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -h
               
      - name: Compile Packages
        id: compile
        run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
      - name: Generate Firmware
        run: |
         df -h
         cd openwrt 
         mkdir -p files/etc/uci-defaults/
         $GITHUB_WORKSPACE/$DIY_P2_SH arm64
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
         make checksum

      - name: Prepare Artifact
        run: |
          mkdir -p ./firmwarer5s
          mkdir -p ./firmwarer5c
          find ./openwrt/bin/targets/ -name "*r5s-ext4-sysupgrade.img.gz" | xargs -i mv -f {} ./firmwarer5s
          find ./openwrt/bin/targets/ -name "*r5s-squashfs-sysupgrade.img.gz" | xargs -i mv -f {} ./firmwarer5s
          cd  ${{ env.FIRMWARE }}/firmwarer5s
          echo -e "Sirpdboy-r5s-Vip-${{ env.DATA }}\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n"  >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *.gz >> 版本日期和MD5信息.txt  || true
          find ${{ env.FIRMWARE }}/openwrt/bin/targets/ -name "*r5c-ext4-sysupgrade.img*" | xargs -i mv -f {} ${{ env.FIRMWARE }}/firmwarer5c
          find ${{ env.FIRMWARE }}/openwrt/bin/targets/ -name "*r5c-squashfs-sysupgrade.img*" | xargs -i mv -f {} ${{ env.FIRMWARE }}/firmwarer5c
          cd ${{ env.FIRMWARE }}/firmwarer5c
          #gzip *.img | true
          echo -e "Sirpdboy-r5c-Vip-${{ env.DATA }}\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n"  >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt

      - name: Upload Firmware R5s
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-R5s-OpenWrt-Ipv6-Firmware
          path: ./firmwarer5s

      - name: Upload Firmware R5c
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-R5c-OpenWrt-Ipv6-Firmware
          path: ./firmwarer5c

      #- name: Upload firmware to release
       # uses: softprops/action-gh-release@v1
        #if: steps.tag.outputs.status == 'success' && !cancelled()
        #env:
        #  GITHUB_TOKEN: ${{ secrets.TOKEN}}
        #with:
        #  tag_name: ${{ steps.tag.outputs.release_tag }}
        #  body_path: release.txt
        #  files: ${{ env.FIRMWARE }}/*

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          retain_days: 1
          keep_minimum_runs: 1

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.2.1
        with:
          keep_latest: 1
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
         name: |
            bin-archive
    
