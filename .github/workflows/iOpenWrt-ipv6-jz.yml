name: iOpenWrt-ipv6-jz

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
    # - cron: 0 17 * * *
  # watch:
  #   types: started

env:
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: openwrt-18.06-k5.4
  CONFIG_FILE: script/super.config
  DIY_SH: scriptx/diy21.sh
  KMODS_IN_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    outputs:
      OPENWRTROOT: ${{ steps.update.outputs.OPENWRTROOT }}
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      FIRMWARE: ${{ steps.compile.outputs.FIRMWARE }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
    - name: Checkout
      uses: actions/checkout@main
      with:
          ref: master
    - name: Check server performance
      run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8272CL有时可以"
         echo "已知性能不足CPU型号：8171M E5-2673基本不行"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004) tree
        sudo apt-get -y install python3 git-core curl
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
    - name: Clone Source Code
      run: |
        df -hT $PWD
        # git config --global user.email "git@github.com"
        # git config --global user.name "GitHub"
        git clone $SOURCE_URL -b $SOURCE_BRANCH openwrt
    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        clean: 'true'

    - name: Update Feeds
      id: update
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "::set-output name=OPENWRTROOT::$(echo $PWD)"
       
         echo "FIRMWARE=$PWD" >> $GITHUB_ENV
         echo "DATA=`TZ=UTC-8 date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
         # echo "DATA=$(date +"%Y%m%d_%H" -d +"12"hour)" >> $GITHUB_ENV
         echo "$FIRMWARE -- ${{ env.DATA }}"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        chmod +x ../scriptx/*.sh
        ../$DIY_SH
    - name: Install Feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
          # cat configx/general-packages.config >> $OPENWRTROOT/.config
          # cat configx/extra-drivers.config >> $OPENWRTROOT/.config
        chmod +x script/*.sh
        cd $OPENWRTROOT
        ../script/clash-core.sh amd64
        # ../scriptx/preset-terminal-tools.sh
    - name: Download Package
      id: package
      run: |
        cd openwrt
        # if "$KMODS_IN_FIRMWARE" = 'true'
        # then
        #     echo "CONFIG_ALL_NONSHARED=y" >> .config
        # fi
        # cat .config
        
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
  
    - name: Compile Packages
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "::set-output name=TARGET::$(echo $TARGET)"
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=FIRMWARE::$(echo $PWD)"
    - name: Generate Firmware
      id: generate
      run: |
        cd $OPENWRTROOT
        
         mkdir -p files/etc/uci-defaults/
         cp ../scriptx/init-settings.sh files/etc/uci-defaults/99-init-settings
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        echo "::set-output name=GENERATE_STATUS::success"

    - name: Prepare Artifact
      run: |
          mkdir -p ./mini/firmware
          mkdir -p ./mini/package
          cp -rf $(find ./openwrt/bin/ -type f -name "*.ipk") ./mini/package
          find ./openwrt/bin/targets/ -name "*squashfs*img" | xargs -i mv -f {} ./mini/firmware
          cd ./mini/firmware
          gzip *.img || true
          echo -e "Sirpdboy-IPV6-Super-VIP$-{{ env.DATA }}-极致版-【efi通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n"  >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt || true
    - name: Upload Firmware wetransfer
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ./mini/firmware 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
    - name: Upload Firmware
      uses: actions/upload-artifact@main
      with:
          name: ${{ env.DATA }} SirpdboyOpenWrt-ipv6-Super-VIP-Firmware
          path: ./mini/firmware
    - name: Upload  IPK
      uses: actions/upload-artifact@main
      with:
          name: ${{ env.DATA }} SirpdboyOpenWrt-ipv6-Super-VIP-Ipk
          path: ./mini/package
