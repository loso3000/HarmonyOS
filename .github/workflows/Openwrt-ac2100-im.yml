name: Openwrt-ac2100-im


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
 #   watch:
 #     types: started
#  schedule:
#    - cron: 0 21 */7 * * 

env:
  REPO_URL: https://github.com/padavanonly/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: xmra2100.im
  DIY_P1_SH: im.sh
  CLASH_BINARY_PLATFORM: mipsle-softfloat
  
jobs:
  build_openwrt:
    name: OpenWrt_Build 
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: master
      - name: Check server performance
        run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8171M"
         echo "已知性能不足CPU型号：8272CL E5-2673"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
         
         if grep  "8272" "/proc/cpuinfo" || grep  "8370" "/proc/cpuinfo" ; then
          echo "CPU YES！！！"
          echo "CKCPU=success" >> $GITHUB_ENV
         else
             echo "CPU NO！！！"
             echo "CKCPU=failure" >> $GITHUB_ENV
             exit 1
         fi
      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir
             sudo timedatectl set-timezone "Asia/Shanghai"
             sudo mkdir -p /workdir
             sudo chown $USER:$GROUPS /workdir
      - name: download
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          rm -rf ./tmp && rm -rf .config
      - name: Update feeds
        run: |
          cd openwrt 
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Update package
        run: |
         [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "DATA=`TZ=UTC-8 date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
          echo "${{ env.FIRMWARE }} =----= ${{ env.DATA }}"
         chmod +x ./$DIY_P1_SH
         chmod +x ./script/clash-core.sh
         cd openwrt
         ../$DIY_P1_SH
         # ../script/clash-core.sh $CLASH_BINARY_PLATFORM 
         chmod -R 755 .
      - name: Generate configuration file
        run: |
          cd openwrt
          make defconfig 
      - name: Make download
        run: |
          cd openwrt
          make download -j8
      - name: Compile Packages
        id: compile
        run: |
         df -h
         cd openwrt
         echo -e "$(nproc) thread compile"
         make tools/compile -j$(nproc) || make tools/compile -j72
         make toolchain/compile -j$(nproc) || make toolchain/compile -j72
         make target/compile -j$(nproc) || make target/compile -j72 IGNORE_ERRORS=1
         make diffconfig
         make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j72 IGNORE_ERRORS=1
         make package/index
         
      - name: Generate Firmware
        id: generate
        run: |
         df -h
         cd openwrt 
         # mkdir -p files/etc/uci-defaults/
         # cp ../scriptx/init-settings.sh files/etc/uci-defaults/99-init-settings
         make package/install -j$(nproc) || make package/install -j1 V=s
         make target/install -j$(nproc) || make target/install -j1 V=s
         make checksum
      - name: Prepare Artifact
        run: |
          mkdir ./ac2100
          find ./openwrt/bin/targets/ -name "*squashfs*" | xargs -i mv -f {} ./ac2100/
          cd ./ac2100
          # rename -v "s/friendlyarm_//" *
          gzip *.bin | true
          # gzip *.img | true
      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-IPV6-xmra2100-Firmware
          path: ./ac2100
      - name: Upload  bin
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-IPV6-xmra2100-bin
          path: ./openwrt/bin/
