name: AOpenWrt-bypass-im


on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  watch:
    types: started
#  schedule:
#    - cron: 0 21 */7 * * 

env:
  # REPO_URL: https://github.com/coolsnowwolf/lede
  
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  #  https://github.com/loso3000/immortalwrt-1.git
  REPO_BRANCH: openwrt-18.06-k5.4
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: script/aimminip
  DIY_P1_SH: script/aimminip.sh
  DIY_P2_SH: script/diy-clash-im.sh
  
permissions:
  contents: read

jobs:

  build_openwrt:

    permissions:
      contents: write # for release creation

    name: Build OpenWrt firmware



    runs-on: ubuntu-latest

    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
          
      - name: Check server performance
        run: |
         echo "警告⚠"
         echo "若分配的服务器性能不足，务必及时取消，重新运行！"
         echo "已知编译成功CPU型号：8370C,8171M"
         echo "已知性能不足CPU型号：8272CL E5-2673"
         echo -e "-------------- ------------CPU信息------------------------------------------\n"
         echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
         echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
         echo "-------------------------------内存信息-------------------------------------------"
         echo "已安装内存详细信息："
         sudo lshw -short -C memory | grep GiB
         echo -e "\n"
         echo "-----------------------------硬盘信息---------------------------------------------"
         echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
         echo "硬盘详情："
         df -Th
         
         if grep  "8272" "/proc/cpuinfo" || grep  "8370" "/proc/cpuinfo" ; then
          echo "CPU YES！！！"
          echo "CKCPU=success" >> $GITHUB_ENV
         else
             echo "CPU NO！！！"
             echo "CKCPU=failure" >> $GITHUB_ENV
             #exit 1
         fi
      - name: Free disk space
        run: |
          sudo rm -rf /etc/apt/sources.list.d
          sudo bash -c "curl -s https://us.cooluc.com/ubuntu-apt/sources-20.04.list > /etc/apt/sources.list"
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo docker image prune -a -f
          sudo systemctl stop docker
          sudo snap set system refresh.retain=2
          sudo apt-get -y purge firefox clang* ghc* google* llvm* mono* mongo* mysql* php*
          sudo apt-get -y autoremove --purge
          sudo apt-get clean
          sudo rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
          sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
          rm -rf ~/{.cargo,.dotnet,.rustup}
          df -Th
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Build System Setup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo sh -c 'echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-17 main" >> /etc/apt/sources.list'
          sudo sh -c 'echo "deb-src http://apt.llvm.org/focal/ llvm-toolchain-focal-17 main" >> /etc/apt/sources.list'
          wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y build-essential nodejs npm flex bison clang-17 cmake g++ gawk gcc-multilib g++-multilib gettext git libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply python3-distutils python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils haveged scons libpython3-dev rename
          sudo apt-get clean
          df -Th
      - name: git lede
        working-directory: /workdir
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          ls
          df -h
      - name: Update feeds
        run: | 
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: Update package
        run: |
         [ -e $CONFIG_FILE ] && mv $CONFIG_FILE ./openwrt/.config
         chmod +x ./$DIY_P1_SH
         chmod +x ./$DIY_P2_SH
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV
          echo "DATA=`date +%Y%m%d_%H -d +"12"hour`" >> $GITHUB_ENV
          echo "${{ env.FIRMWARE }} =----= ${{ env.DATA }}"
         cd openwrt
         $GITHUB_WORKSPACE/$DIY_P1_SH
         $GITHUB_WORKSPACE/$DIY_P2_SH amd64
         chmod -R 755 .
          make defconfig
          df -h
      - name: Generate configuration file
        run: |
          cd openwrt
          make download -j32
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          df -h
      - name: Compile Packages
        id: compile
        run: |

         cd openwrt 
         mkdir -p files/etc/uci-defaults/
         cp $GITHUB_WORKSPACE/scriptx/init-settings.sh files/etc/uci-defaults/99-init-settings
         
         make -j$(($(nproc)+1)) || make -j1 V=s
         
         pushd bin/targets/x86/64  
         rm -rf *-x86-64-generic-kernel.bin
         rm -rf *t-x86-64-generic-rootfs.tar.gz
         rm -rf *-x86-64-generic-squashfs-rootfs.img.gz
         rm -rf *-x86-64-generic-squashfs-combined-efi.vmdk
         rm -rf *-x86-64-generic.manifest 
         popd

         df -h
      - name: Prepare Artifact
        run: |
          mkdir -p ./imminip/firmware
          mkdir -p ./imminip/package
          cp -rf $(find ./openwrt/bin/ -type f -name "*.ipk") ./imminip/package
          find ./openwrt/bin/targets/ -name "*squashfs-combined*" | xargs -i mv -f {} ./imminip/firmware
          cd ./imminip/firmware
          gzip *.img | true
          echo -e "SirpdboyOpenWrt-Bypass-Vip-${{ env.DATA }}-旁路由--【efi通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n"  >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt || true

      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-Vip-Bypass-Firmware
          path: ./imminip/firmware
          
      - name: Upload  IPK
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.DATA }}-SirpdboyOpenWrt-Bypass-Vip-Ipk
          path: ./imminip/package
          
      #- name: Upload Firmware wetransfer
      #  run: |
      #    curl -fsSL git.io/file-transfer | sh
      #    ./transfer wet -s -p 16 --no-progress ./imminip/firmware 2>&1 | tee wetransfer.log
      #    echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
          
